import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Send, Mic, MicOff, Bot, User, Loader, Sparkles, Brain, Zap } from 'lucide-react';
import { useTranslation } from 'react-i18next';

interface AIAssistantProps {
  isOpen: boolean;
  onClose: () => void;
}

interface Message {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
  isTyping?: boolean;
}

export default function AIAssistant({ isOpen, onClose }: AIAssistantProps) {
  const { t } = useTranslation();
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'ai',
      content: '‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ AI ‡§ï‡•É‡§∑‡§ø ‡§∏‡§≤‡§æ‡§π‡§ï‡§æ‡§∞ ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§´‡§∏‡§≤, ‡§Æ‡•å‡§∏‡§Æ, ‡§ï‡•Ä‡§ü, ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä, ‡§Ø‡§æ ‡§ñ‡•á‡§§‡•Ä ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡§æ ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‚Ä¢ Hello! I am your AI Agricultural Advisor. You can ask me anything about crops, weather, pests, diseases, or farming.',
      timestamp: new Date(),
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isListening, setIsListening] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const aiResponses = {
    'crop': [
      '‡§ß‡§æ‡§® ‡§ï‡•Ä ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§≠‡•Ä ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡§Æ‡§Ø ‡§π‡•à‡•§ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§Æ‡•á‡§Ç ‡§®‡§Æ‡•Ä 70% ‡§π‡•ã‡§®‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è‡•§ ‚Ä¢ This is the best time for rice cultivation. Soil moisture should be 70%.',
      '‡§ó‡•á‡§π‡•Ç‡§Ç ‡§ï‡•Ä ‡§¨‡•Å‡§Ü‡§à ‡§®‡§µ‡§Ç‡§¨‡§∞ ‡§Æ‡•á‡§Ç ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§¨‡•Ä‡§ú ‡§¶‡§∞ 100-120 ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ ‡§™‡•ç‡§∞‡§§‡§ø ‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞ ‡§∞‡§ñ‡•á‡§Ç‡•§ ‚Ä¢ Sow wheat in November. Keep seed rate 100-120 kg per hectare.',
      '‡§ï‡§™‡§æ‡§∏ ‡§ï‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§æ‡§≤‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§ ‚Ä¢ Black soil is best for cotton crop.'
    ],
    'weather': [
      '‡§Ü‡§ú ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ ‡§π‡•à‡•§ ‡§´‡§∏‡§≤ ‡§ï‡•ã ‡§¢‡§ï‡§®‡•á ‡§ï‡•Ä ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä ‡§ï‡§∞‡•á‡§Ç‡•§ ‚Ä¢ There is a chance of rain today. Prepare to cover crops.',
      '‡§Ö‡§ó‡§≤‡•á 3 ‡§¶‡§ø‡§® ‡§ß‡•Ç‡§™ ‡§∞‡§π‡•á‡§ó‡•Ä‡•§ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ï‡•Ä ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§ ‚Ä¢ It will be sunny for the next 3 days. Arrange for irrigation.',
      '‡§§‡§æ‡§™‡§Æ‡§æ‡§® 35¬∞C ‡§∏‡•á ‡§ä‡§™‡§∞ ‡§ú‡§æ‡§®‡•á ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ ‡§π‡•à‡•§ ‡§™‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç‡•§ ‚Ä¢ Temperature may go above 35¬∞C. Increase water quantity.'
    ],
    'pest': [
      '‡§™‡§§‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§™‡§∞ ‡§∏‡§´‡•á‡§¶ ‡§ß‡§¨‡•ç‡§¨‡•á ‡§¶‡§ø‡§ñ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç ‡§§‡•ã ‡§Ø‡§π ‡§™‡§æ‡§â‡§°‡§∞‡•Ä ‡§Æ‡§ø‡§≤‡•ç‡§°‡•ç‡§Ø‡•Ç ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§ ‡§®‡•Ä‡§Æ ‡§ï‡§æ ‡§§‡•á‡§≤ ‡§õ‡§ø‡§°‡§º‡§ï‡•á‡§Ç‡•§ ‚Ä¢ White spots on leaves could be powdery mildew. Spray neem oil.',
      '‡§§‡§®‡§æ ‡§õ‡•á‡§¶‡§ï ‡§ï‡•Ä‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡•á‡§∞‡•ã‡§Æ‡•ã‡§® ‡§ü‡•ç‡§∞‡•à‡§™ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§ ‚Ä¢ Use pheromone traps for stem borer pest.',
      '‡§ú‡•à‡§µ‡§ø‡§ï ‡§ï‡•Ä‡§ü‡§®‡§æ‡§∂‡§ï ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§∞‡§æ‡§∏‡§æ‡§Ø‡§®‡§ø‡§ï ‡§¶‡§µ‡§æ ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç‡•§ ‚Ä¢ Use organic pesticides. Avoid chemical medicines.'
    ],
    'soil': [
      '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§æ‡§è‡§Ç‡•§ pH 6.5-7.5 ‡§ï‡•á ‡§¨‡•Ä‡§ö ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§ ‚Ä¢ Get soil tested. pH should be between 6.5-7.5.',
      '‡§ú‡•à‡§µ‡§ø‡§ï ‡§ñ‡§æ‡§¶ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§ó‡•ã‡§¨‡§∞ ‡§ï‡•Ä ‡§ñ‡§æ‡§¶ ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§π‡•à‡•§ ‚Ä¢ Use organic fertilizer. Cow dung manure is the best.',
      '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§Æ‡•á‡§Ç ‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® ‡§ï‡•Ä ‡§ï‡§Æ‡•Ä ‡§π‡•à‡•§ ‡§Ø‡•Ç‡§∞‡§ø‡§Ø‡§æ ‡§ï‡§æ ‡§õ‡§ø‡§°‡§º‡§ï‡§æ‡§µ ‡§ï‡§∞‡•á‡§Ç‡•§ ‚Ä¢ Soil lacks nitrogen. Spray urea.'
    ],
    'default': [
      '‡§Ø‡§π ‡§è‡§ï ‡§¶‡§ø‡§≤‡§ö‡§∏‡•ç‡§™ ‡§∏‡§µ‡§æ‡§≤ ‡§π‡•à‡•§ ‡§Æ‡•Å‡§ù‡•á ‡§î‡§∞ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è‡•§ ‚Ä¢ This is an interesting question. I need more information.',
      '‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§î‡§∞ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§ ‚Ä¢ Please clarify your question more.',
      '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç‡•§ ‚Ä¢ I am trying to help you.'
    ]
  };

  const getAIResponse = (message: string): string => {
    const lowerMessage = message.toLowerCase();
    
    if (lowerMessage.includes('crop') || lowerMessage.includes('‡§´‡§∏‡§≤') || lowerMessage.includes('‡§ß‡§æ‡§®') || lowerMessage.includes('‡§ó‡•á‡§π‡•Ç‡§Ç')) {
      return aiResponses.crop[Math.floor(Math.random() * aiResponses.crop.length)];
    } else if (lowerMessage.includes('weather') || lowerMessage.includes('‡§Æ‡•å‡§∏‡§Æ') || lowerMessage.includes('‡§¨‡§æ‡§∞‡§ø‡§∂')) {
      return aiResponses.weather[Math.floor(Math.random() * aiResponses.weather.length)];
    } else if (lowerMessage.includes('pest') || lowerMessage.includes('‡§ï‡•Ä‡§ü') || lowerMessage.includes('‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä')) {
      return aiResponses.pest[Math.floor(Math.random() * aiResponses.pest.length)];
    } else if (lowerMessage.includes('soil') || lowerMessage.includes('‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä') || lowerMessage.includes('‡§ñ‡§æ‡§¶')) {
      return aiResponses.soil[Math.floor(Math.random() * aiResponses.soil.length)];
    } else {
      return aiResponses.default[Math.floor(Math.random() * aiResponses.default.length)];
    }
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simulate AI thinking time
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: getAIResponse(inputMessage),
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, aiResponse]);
      setIsTyping(false);
    }, 1500 + Math.random() * 1000);
  };

  const handleVoiceInput = () => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;
      const recognition = new SpeechRecognition();
      
      recognition.lang = 'hi-IN';
      recognition.continuous = false;
      recognition.interimResults = false;

      recognition.onstart = () => setIsListening(true);
      recognition.onend = () => setIsListening(false);
      
      recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setInputMessage(transcript);
      };

      recognition.start();
    }
  };

  if (!isOpen) return null;

  return (
    <AnimatePresence>
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.9 }}
          className="bg-white rounded-2xl shadow-2xl w-full max-w-4xl h-[80vh] flex flex-col"
        >
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b border-gray-200 bg-gradient-to-r from-green-600 to-blue-600 text-white rounded-t-2xl">
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 bg-white bg-opacity-20 rounded-xl flex items-center justify-center">
                <Brain className="w-6 h-6 text-white" />
              </div>
              <div>
                <h2 className="text-xl font-bold">ü§ñ AI ‡§ï‡•É‡§∑‡§ø ‡§∏‡§≤‡§æ‡§π‡§ï‡§æ‡§∞ ‚Ä¢ AI Agricultural Advisor</h2>
                <p className="text-sm text-green-100">‡§Ü‡§™‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§ñ‡•á‡§§‡•Ä ‡§∏‡§≤‡§æ‡§π‡§ï‡§æ‡§∞ ‚Ä¢ Your Personal Farming Consultant</p>
              </div>
            </div>
            <button
              onClick={onClose}
              className="p-2 hover:bg-white hover:bg-opacity-20 rounded-lg transition-colors"
            >
              <X className="w-5 h-5 text-white" />
            </button>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-6 space-y-4">
            {messages.map((message) => (
              <motion.div
                key={message.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div className={`flex items-start gap-3 max-w-[80%] ${message.type === 'user' ? 'flex-row-reverse' : ''}`}>
                  <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
                    message.type === 'user' 
                      ? 'bg-blue-100' 
                      : 'bg-gradient-to-br from-green-100 to-blue-100'
                  }`}>
                    {message.type === 'user' ? (
                      <User className="w-5 h-5 text-blue-600" />
                    ) : (
                      <Bot className="w-5 h-5 text-green-600" />
                    )}
                  </div>
                  <div className={`rounded-2xl p-4 ${
                    message.type === 'user'
                      ? 'bg-blue-600 text-white'
                      : 'bg-gradient-to-br from-gray-50 to-green-50 text-gray-800 border border-green-100'
                  }`}>
                    <p className="text-sm leading-relaxed">{message.content}</p>
                    <p className={`text-xs mt-2 ${
                      message.type === 'user' ? 'text-blue-100' : 'text-gray-500'
                    }`}>
                      {message.timestamp.toLocaleTimeString('hi-IN', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </p>
                  </div>
                </div>
              </motion.div>
            ))}

            {isTyping && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="flex justify-start"
              >
                <div className="flex items-start gap-3">
                  <div className="w-10 h-10 rounded-full bg-gradient-to-br from-green-100 to-blue-100 flex items-center justify-center">
                    <Bot className="w-5 h-5 text-green-600" />
                  </div>
                  <div className="bg-gradient-to-br from-gray-50 to-green-50 rounded-2xl p-4 border border-green-100">
                    <div className="flex items-center gap-2">
                      <Loader className="w-4 h-4 animate-spin text-green-600" />
                      <span className="text-sm text-gray-600">AI ‡§∏‡•ã‡§ö ‡§∞‡§π‡§æ ‡§π‡•à... ‚Ä¢ AI is thinking...</span>
                    </div>
                  </div>
                </div>
              </motion.div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="p-6 border-t border-gray-200 bg-gray-50">
            <div className="flex items-center gap-4">
              <div className="flex-1 relative">
                <input
                  type="text"
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                  placeholder="‡§Ö‡§™‡§®‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§Ø‡§π‡§æ‡§Ç ‡§≤‡§ø‡§ñ‡•á‡§Ç... ‚Ä¢ Type your question here..."
                  className="w-full px-4 py-3 pr-12 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-transparent"
                />
                <button
                  onClick={handleVoiceInput}
                  className={`absolute right-3 top-1/2 transform -translate-y-1/2 p-2 rounded-lg transition-colors ${
                    isListening 
                      ? 'bg-red-100 text-red-600' 
                      : 'bg-gray-100 text-gray-600 hover:bg-green-100 hover:text-green-600'
                  }`}
                >
                  {isListening ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
                </button>
              </div>
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                onClick={handleSendMessage}
                disabled={!inputMessage.trim() || isTyping}
                className="flex items-center gap-2 bg-gradient-to-r from-green-600 to-blue-600 text-white px-6 py-3 rounded-xl hover:from-green-700 hover:to-blue-700 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Send className="w-4 h-4" />
                <span className="hidden sm:inline">‡§≠‡•á‡§ú‡•á‡§Ç ‚Ä¢ Send</span>
              </motion.button>
            </div>

            {/* Quick Actions */}
            <div className="flex flex-wrap gap-2 mt-4">
              {[
                'üåæ ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂ ‚Ä¢ Crop Recommendation',
                'üå§Ô∏è ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‚Ä¢ Weather Info',
                'üêõ ‡§ï‡•Ä‡§ü ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‚Ä¢ Pest Problem',
                'üå± ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‚Ä¢ Soil Test'
              ].map((action, index) => (
                <motion.button
                  key={index}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => setInputMessage(action.split(' ‚Ä¢ ')[1] || action)}
                  className="px-3 py-2 bg-white border border-gray-300 rounded-lg text-sm text-gray-700 hover:bg-green-50 hover:border-green-300 transition-colors"
                >
                  {action}
                </motion.button>
              ))}
            </div>
          </div>
        </motion.div>
      </div>
    </AnimatePresence>
  );
}